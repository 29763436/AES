// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/18/2024 01:18:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AESK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AESK_vlg_sample_tst(
	CLK,
	key,
	sel,
	sampler_tx
);
input  CLK;
input [127:0] key;
input  sel;
output sampler_tx;

reg sample;
time current_time;
always @(CLK or key or sel)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module AESK_vlg_check_tst (
	w0,
	w1,
	w2,
	w3,
	sampler_rx
);
input [31:0] w0;
input [31:0] w1;
input [31:0] w2;
input [31:0] w3;
input sampler_rx;

reg [31:0] w0_expected;
reg [31:0] w1_expected;
reg [31:0] w2_expected;
reg [31:0] w3_expected;

reg [31:0] w0_prev;
reg [31:0] w1_prev;
reg [31:0] w2_prev;
reg [31:0] w3_prev;

reg [31:0] w0_expected_prev;
reg [31:0] w1_expected_prev;
reg [31:0] w2_expected_prev;
reg [31:0] w3_expected_prev;

reg [31:0] last_w0_exp;
reg [31:0] last_w1_exp;
reg [31:0] last_w2_exp;
reg [31:0] last_w3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	w0_prev = w0;
	w1_prev = w1;
	w2_prev = w2;
	w3_prev = w3;
end

// update expected /o prevs

always @(trigger)
begin
	w0_expected_prev = w0_expected;
	w1_expected_prev = w1_expected;
	w2_expected_prev = w2_expected;
	w3_expected_prev = w3_expected;
end


// expected w0[ 31 ]
initial
begin
	w0_expected[31] = 1'bX;
end 
// expected w0[ 30 ]
initial
begin
	w0_expected[30] = 1'bX;
end 
// expected w0[ 29 ]
initial
begin
	w0_expected[29] = 1'bX;
end 
// expected w0[ 28 ]
initial
begin
	w0_expected[28] = 1'bX;
end 
// expected w0[ 27 ]
initial
begin
	w0_expected[27] = 1'bX;
end 
// expected w0[ 26 ]
initial
begin
	w0_expected[26] = 1'bX;
end 
// expected w0[ 25 ]
initial
begin
	w0_expected[25] = 1'bX;
end 
// expected w0[ 24 ]
initial
begin
	w0_expected[24] = 1'bX;
end 
// expected w0[ 23 ]
initial
begin
	w0_expected[23] = 1'bX;
end 
// expected w0[ 22 ]
initial
begin
	w0_expected[22] = 1'bX;
end 
// expected w0[ 21 ]
initial
begin
	w0_expected[21] = 1'bX;
end 
// expected w0[ 20 ]
initial
begin
	w0_expected[20] = 1'bX;
end 
// expected w0[ 19 ]
initial
begin
	w0_expected[19] = 1'bX;
end 
// expected w0[ 18 ]
initial
begin
	w0_expected[18] = 1'bX;
end 
// expected w0[ 17 ]
initial
begin
	w0_expected[17] = 1'bX;
end 
// expected w0[ 16 ]
initial
begin
	w0_expected[16] = 1'bX;
end 
// expected w0[ 15 ]
initial
begin
	w0_expected[15] = 1'bX;
end 
// expected w0[ 14 ]
initial
begin
	w0_expected[14] = 1'bX;
end 
// expected w0[ 13 ]
initial
begin
	w0_expected[13] = 1'bX;
end 
// expected w0[ 12 ]
initial
begin
	w0_expected[12] = 1'bX;
end 
// expected w0[ 11 ]
initial
begin
	w0_expected[11] = 1'bX;
end 
// expected w0[ 10 ]
initial
begin
	w0_expected[10] = 1'bX;
end 
// expected w0[ 9 ]
initial
begin
	w0_expected[9] = 1'bX;
end 
// expected w0[ 8 ]
initial
begin
	w0_expected[8] = 1'bX;
end 
// expected w0[ 7 ]
initial
begin
	w0_expected[7] = 1'bX;
end 
// expected w0[ 6 ]
initial
begin
	w0_expected[6] = 1'bX;
end 
// expected w0[ 5 ]
initial
begin
	w0_expected[5] = 1'bX;
end 
// expected w0[ 4 ]
initial
begin
	w0_expected[4] = 1'bX;
end 
// expected w0[ 3 ]
initial
begin
	w0_expected[3] = 1'bX;
end 
// expected w0[ 2 ]
initial
begin
	w0_expected[2] = 1'bX;
end 
// expected w0[ 1 ]
initial
begin
	w0_expected[1] = 1'bX;
end 
// expected w0[ 0 ]
initial
begin
	w0_expected[0] = 1'bX;
end 
// expected w1[ 31 ]
initial
begin
	w1_expected[31] = 1'bX;
end 
// expected w1[ 30 ]
initial
begin
	w1_expected[30] = 1'bX;
end 
// expected w1[ 29 ]
initial
begin
	w1_expected[29] = 1'bX;
end 
// expected w1[ 28 ]
initial
begin
	w1_expected[28] = 1'bX;
end 
// expected w1[ 27 ]
initial
begin
	w1_expected[27] = 1'bX;
end 
// expected w1[ 26 ]
initial
begin
	w1_expected[26] = 1'bX;
end 
// expected w1[ 25 ]
initial
begin
	w1_expected[25] = 1'bX;
end 
// expected w1[ 24 ]
initial
begin
	w1_expected[24] = 1'bX;
end 
// expected w1[ 23 ]
initial
begin
	w1_expected[23] = 1'bX;
end 
// expected w1[ 22 ]
initial
begin
	w1_expected[22] = 1'bX;
end 
// expected w1[ 21 ]
initial
begin
	w1_expected[21] = 1'bX;
end 
// expected w1[ 20 ]
initial
begin
	w1_expected[20] = 1'bX;
end 
// expected w1[ 19 ]
initial
begin
	w1_expected[19] = 1'bX;
end 
// expected w1[ 18 ]
initial
begin
	w1_expected[18] = 1'bX;
end 
// expected w1[ 17 ]
initial
begin
	w1_expected[17] = 1'bX;
end 
// expected w1[ 16 ]
initial
begin
	w1_expected[16] = 1'bX;
end 
// expected w1[ 15 ]
initial
begin
	w1_expected[15] = 1'bX;
end 
// expected w1[ 14 ]
initial
begin
	w1_expected[14] = 1'bX;
end 
// expected w1[ 13 ]
initial
begin
	w1_expected[13] = 1'bX;
end 
// expected w1[ 12 ]
initial
begin
	w1_expected[12] = 1'bX;
end 
// expected w1[ 11 ]
initial
begin
	w1_expected[11] = 1'bX;
end 
// expected w1[ 10 ]
initial
begin
	w1_expected[10] = 1'bX;
end 
// expected w1[ 9 ]
initial
begin
	w1_expected[9] = 1'bX;
end 
// expected w1[ 8 ]
initial
begin
	w1_expected[8] = 1'bX;
end 
// expected w1[ 7 ]
initial
begin
	w1_expected[7] = 1'bX;
end 
// expected w1[ 6 ]
initial
begin
	w1_expected[6] = 1'bX;
end 
// expected w1[ 5 ]
initial
begin
	w1_expected[5] = 1'bX;
end 
// expected w1[ 4 ]
initial
begin
	w1_expected[4] = 1'bX;
end 
// expected w1[ 3 ]
initial
begin
	w1_expected[3] = 1'bX;
end 
// expected w1[ 2 ]
initial
begin
	w1_expected[2] = 1'bX;
end 
// expected w1[ 1 ]
initial
begin
	w1_expected[1] = 1'bX;
end 
// expected w1[ 0 ]
initial
begin
	w1_expected[0] = 1'bX;
end 
// expected w2[ 31 ]
initial
begin
	w2_expected[31] = 1'bX;
end 
// expected w2[ 30 ]
initial
begin
	w2_expected[30] = 1'bX;
end 
// expected w2[ 29 ]
initial
begin
	w2_expected[29] = 1'bX;
end 
// expected w2[ 28 ]
initial
begin
	w2_expected[28] = 1'bX;
end 
// expected w2[ 27 ]
initial
begin
	w2_expected[27] = 1'bX;
end 
// expected w2[ 26 ]
initial
begin
	w2_expected[26] = 1'bX;
end 
// expected w2[ 25 ]
initial
begin
	w2_expected[25] = 1'bX;
end 
// expected w2[ 24 ]
initial
begin
	w2_expected[24] = 1'bX;
end 
// expected w2[ 23 ]
initial
begin
	w2_expected[23] = 1'bX;
end 
// expected w2[ 22 ]
initial
begin
	w2_expected[22] = 1'bX;
end 
// expected w2[ 21 ]
initial
begin
	w2_expected[21] = 1'bX;
end 
// expected w2[ 20 ]
initial
begin
	w2_expected[20] = 1'bX;
end 
// expected w2[ 19 ]
initial
begin
	w2_expected[19] = 1'bX;
end 
// expected w2[ 18 ]
initial
begin
	w2_expected[18] = 1'bX;
end 
// expected w2[ 17 ]
initial
begin
	w2_expected[17] = 1'bX;
end 
// expected w2[ 16 ]
initial
begin
	w2_expected[16] = 1'bX;
end 
// expected w2[ 15 ]
initial
begin
	w2_expected[15] = 1'bX;
end 
// expected w2[ 14 ]
initial
begin
	w2_expected[14] = 1'bX;
end 
// expected w2[ 13 ]
initial
begin
	w2_expected[13] = 1'bX;
end 
// expected w2[ 12 ]
initial
begin
	w2_expected[12] = 1'bX;
end 
// expected w2[ 11 ]
initial
begin
	w2_expected[11] = 1'bX;
end 
// expected w2[ 10 ]
initial
begin
	w2_expected[10] = 1'bX;
end 
// expected w2[ 9 ]
initial
begin
	w2_expected[9] = 1'bX;
end 
// expected w2[ 8 ]
initial
begin
	w2_expected[8] = 1'bX;
end 
// expected w2[ 7 ]
initial
begin
	w2_expected[7] = 1'bX;
end 
// expected w2[ 6 ]
initial
begin
	w2_expected[6] = 1'bX;
end 
// expected w2[ 5 ]
initial
begin
	w2_expected[5] = 1'bX;
end 
// expected w2[ 4 ]
initial
begin
	w2_expected[4] = 1'bX;
end 
// expected w2[ 3 ]
initial
begin
	w2_expected[3] = 1'bX;
end 
// expected w2[ 2 ]
initial
begin
	w2_expected[2] = 1'bX;
end 
// expected w2[ 1 ]
initial
begin
	w2_expected[1] = 1'bX;
end 
// expected w2[ 0 ]
initial
begin
	w2_expected[0] = 1'bX;
end 
// expected w3[ 31 ]
initial
begin
	w3_expected[31] = 1'bX;
end 
// expected w3[ 30 ]
initial
begin
	w3_expected[30] = 1'bX;
end 
// expected w3[ 29 ]
initial
begin
	w3_expected[29] = 1'bX;
end 
// expected w3[ 28 ]
initial
begin
	w3_expected[28] = 1'bX;
end 
// expected w3[ 27 ]
initial
begin
	w3_expected[27] = 1'bX;
end 
// expected w3[ 26 ]
initial
begin
	w3_expected[26] = 1'bX;
end 
// expected w3[ 25 ]
initial
begin
	w3_expected[25] = 1'bX;
end 
// expected w3[ 24 ]
initial
begin
	w3_expected[24] = 1'bX;
end 
// expected w3[ 23 ]
initial
begin
	w3_expected[23] = 1'bX;
end 
// expected w3[ 22 ]
initial
begin
	w3_expected[22] = 1'bX;
end 
// expected w3[ 21 ]
initial
begin
	w3_expected[21] = 1'bX;
end 
// expected w3[ 20 ]
initial
begin
	w3_expected[20] = 1'bX;
end 
// expected w3[ 19 ]
initial
begin
	w3_expected[19] = 1'bX;
end 
// expected w3[ 18 ]
initial
begin
	w3_expected[18] = 1'bX;
end 
// expected w3[ 17 ]
initial
begin
	w3_expected[17] = 1'bX;
end 
// expected w3[ 16 ]
initial
begin
	w3_expected[16] = 1'bX;
end 
// expected w3[ 15 ]
initial
begin
	w3_expected[15] = 1'bX;
end 
// expected w3[ 14 ]
initial
begin
	w3_expected[14] = 1'bX;
end 
// expected w3[ 13 ]
initial
begin
	w3_expected[13] = 1'bX;
end 
// expected w3[ 12 ]
initial
begin
	w3_expected[12] = 1'bX;
end 
// expected w3[ 11 ]
initial
begin
	w3_expected[11] = 1'bX;
end 
// expected w3[ 10 ]
initial
begin
	w3_expected[10] = 1'bX;
end 
// expected w3[ 9 ]
initial
begin
	w3_expected[9] = 1'bX;
end 
// expected w3[ 8 ]
initial
begin
	w3_expected[8] = 1'bX;
end 
// expected w3[ 7 ]
initial
begin
	w3_expected[7] = 1'bX;
end 
// expected w3[ 6 ]
initial
begin
	w3_expected[6] = 1'bX;
end 
// expected w3[ 5 ]
initial
begin
	w3_expected[5] = 1'bX;
end 
// expected w3[ 4 ]
initial
begin
	w3_expected[4] = 1'bX;
end 
// expected w3[ 3 ]
initial
begin
	w3_expected[3] = 1'bX;
end 
// expected w3[ 2 ]
initial
begin
	w3_expected[2] = 1'bX;
end 
// expected w3[ 1 ]
initial
begin
	w3_expected[1] = 1'bX;
end 
// expected w3[ 0 ]
initial
begin
	w3_expected[0] = 1'bX;
end 
// generate trigger
always @(w0_expected or w0 or w1_expected or w1 or w2_expected or w2 or w3_expected or w3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected w0 = %b | expected w1 = %b | expected w2 = %b | expected w3 = %b | ",w0_expected_prev,w1_expected_prev,w2_expected_prev,w3_expected_prev);
	$display("| real w0 = %b | real w1 = %b | real w2 = %b | real w3 = %b | ",w0_prev,w1_prev,w2_prev,w3_prev);
`endif
	if (
		( w0_expected_prev[0] !== 1'bx ) && ( w0_prev[0] !== w0_expected_prev[0] )
		&& ((w0_expected_prev[0] !== last_w0_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[0] = w0_expected_prev[0];
	end
	if (
		( w0_expected_prev[1] !== 1'bx ) && ( w0_prev[1] !== w0_expected_prev[1] )
		&& ((w0_expected_prev[1] !== last_w0_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[1] = w0_expected_prev[1];
	end
	if (
		( w0_expected_prev[2] !== 1'bx ) && ( w0_prev[2] !== w0_expected_prev[2] )
		&& ((w0_expected_prev[2] !== last_w0_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[2] = w0_expected_prev[2];
	end
	if (
		( w0_expected_prev[3] !== 1'bx ) && ( w0_prev[3] !== w0_expected_prev[3] )
		&& ((w0_expected_prev[3] !== last_w0_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[3] = w0_expected_prev[3];
	end
	if (
		( w0_expected_prev[4] !== 1'bx ) && ( w0_prev[4] !== w0_expected_prev[4] )
		&& ((w0_expected_prev[4] !== last_w0_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[4] = w0_expected_prev[4];
	end
	if (
		( w0_expected_prev[5] !== 1'bx ) && ( w0_prev[5] !== w0_expected_prev[5] )
		&& ((w0_expected_prev[5] !== last_w0_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[5] = w0_expected_prev[5];
	end
	if (
		( w0_expected_prev[6] !== 1'bx ) && ( w0_prev[6] !== w0_expected_prev[6] )
		&& ((w0_expected_prev[6] !== last_w0_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[6] = w0_expected_prev[6];
	end
	if (
		( w0_expected_prev[7] !== 1'bx ) && ( w0_prev[7] !== w0_expected_prev[7] )
		&& ((w0_expected_prev[7] !== last_w0_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[7] = w0_expected_prev[7];
	end
	if (
		( w0_expected_prev[8] !== 1'bx ) && ( w0_prev[8] !== w0_expected_prev[8] )
		&& ((w0_expected_prev[8] !== last_w0_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[8] = w0_expected_prev[8];
	end
	if (
		( w0_expected_prev[9] !== 1'bx ) && ( w0_prev[9] !== w0_expected_prev[9] )
		&& ((w0_expected_prev[9] !== last_w0_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[9] = w0_expected_prev[9];
	end
	if (
		( w0_expected_prev[10] !== 1'bx ) && ( w0_prev[10] !== w0_expected_prev[10] )
		&& ((w0_expected_prev[10] !== last_w0_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[10] = w0_expected_prev[10];
	end
	if (
		( w0_expected_prev[11] !== 1'bx ) && ( w0_prev[11] !== w0_expected_prev[11] )
		&& ((w0_expected_prev[11] !== last_w0_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[11] = w0_expected_prev[11];
	end
	if (
		( w0_expected_prev[12] !== 1'bx ) && ( w0_prev[12] !== w0_expected_prev[12] )
		&& ((w0_expected_prev[12] !== last_w0_exp[12]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[12] = w0_expected_prev[12];
	end
	if (
		( w0_expected_prev[13] !== 1'bx ) && ( w0_prev[13] !== w0_expected_prev[13] )
		&& ((w0_expected_prev[13] !== last_w0_exp[13]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[13] = w0_expected_prev[13];
	end
	if (
		( w0_expected_prev[14] !== 1'bx ) && ( w0_prev[14] !== w0_expected_prev[14] )
		&& ((w0_expected_prev[14] !== last_w0_exp[14]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[14] = w0_expected_prev[14];
	end
	if (
		( w0_expected_prev[15] !== 1'bx ) && ( w0_prev[15] !== w0_expected_prev[15] )
		&& ((w0_expected_prev[15] !== last_w0_exp[15]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[15] = w0_expected_prev[15];
	end
	if (
		( w0_expected_prev[16] !== 1'bx ) && ( w0_prev[16] !== w0_expected_prev[16] )
		&& ((w0_expected_prev[16] !== last_w0_exp[16]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[16] = w0_expected_prev[16];
	end
	if (
		( w0_expected_prev[17] !== 1'bx ) && ( w0_prev[17] !== w0_expected_prev[17] )
		&& ((w0_expected_prev[17] !== last_w0_exp[17]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[17] = w0_expected_prev[17];
	end
	if (
		( w0_expected_prev[18] !== 1'bx ) && ( w0_prev[18] !== w0_expected_prev[18] )
		&& ((w0_expected_prev[18] !== last_w0_exp[18]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[18] = w0_expected_prev[18];
	end
	if (
		( w0_expected_prev[19] !== 1'bx ) && ( w0_prev[19] !== w0_expected_prev[19] )
		&& ((w0_expected_prev[19] !== last_w0_exp[19]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[19] = w0_expected_prev[19];
	end
	if (
		( w0_expected_prev[20] !== 1'bx ) && ( w0_prev[20] !== w0_expected_prev[20] )
		&& ((w0_expected_prev[20] !== last_w0_exp[20]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[20] = w0_expected_prev[20];
	end
	if (
		( w0_expected_prev[21] !== 1'bx ) && ( w0_prev[21] !== w0_expected_prev[21] )
		&& ((w0_expected_prev[21] !== last_w0_exp[21]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[21] = w0_expected_prev[21];
	end
	if (
		( w0_expected_prev[22] !== 1'bx ) && ( w0_prev[22] !== w0_expected_prev[22] )
		&& ((w0_expected_prev[22] !== last_w0_exp[22]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[22] = w0_expected_prev[22];
	end
	if (
		( w0_expected_prev[23] !== 1'bx ) && ( w0_prev[23] !== w0_expected_prev[23] )
		&& ((w0_expected_prev[23] !== last_w0_exp[23]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[23] = w0_expected_prev[23];
	end
	if (
		( w0_expected_prev[24] !== 1'bx ) && ( w0_prev[24] !== w0_expected_prev[24] )
		&& ((w0_expected_prev[24] !== last_w0_exp[24]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[24] = w0_expected_prev[24];
	end
	if (
		( w0_expected_prev[25] !== 1'bx ) && ( w0_prev[25] !== w0_expected_prev[25] )
		&& ((w0_expected_prev[25] !== last_w0_exp[25]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[25] = w0_expected_prev[25];
	end
	if (
		( w0_expected_prev[26] !== 1'bx ) && ( w0_prev[26] !== w0_expected_prev[26] )
		&& ((w0_expected_prev[26] !== last_w0_exp[26]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[26] = w0_expected_prev[26];
	end
	if (
		( w0_expected_prev[27] !== 1'bx ) && ( w0_prev[27] !== w0_expected_prev[27] )
		&& ((w0_expected_prev[27] !== last_w0_exp[27]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[27] = w0_expected_prev[27];
	end
	if (
		( w0_expected_prev[28] !== 1'bx ) && ( w0_prev[28] !== w0_expected_prev[28] )
		&& ((w0_expected_prev[28] !== last_w0_exp[28]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[28] = w0_expected_prev[28];
	end
	if (
		( w0_expected_prev[29] !== 1'bx ) && ( w0_prev[29] !== w0_expected_prev[29] )
		&& ((w0_expected_prev[29] !== last_w0_exp[29]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[29] = w0_expected_prev[29];
	end
	if (
		( w0_expected_prev[30] !== 1'bx ) && ( w0_prev[30] !== w0_expected_prev[30] )
		&& ((w0_expected_prev[30] !== last_w0_exp[30]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[30] = w0_expected_prev[30];
	end
	if (
		( w0_expected_prev[31] !== 1'bx ) && ( w0_prev[31] !== w0_expected_prev[31] )
		&& ((w0_expected_prev[31] !== last_w0_exp[31]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w0[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w0_expected_prev);
		$display ("     Real value = %b", w0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_w0_exp[31] = w0_expected_prev[31];
	end
	if (
		( w1_expected_prev[0] !== 1'bx ) && ( w1_prev[0] !== w1_expected_prev[0] )
		&& ((w1_expected_prev[0] !== last_w1_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[0] = w1_expected_prev[0];
	end
	if (
		( w1_expected_prev[1] !== 1'bx ) && ( w1_prev[1] !== w1_expected_prev[1] )
		&& ((w1_expected_prev[1] !== last_w1_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[1] = w1_expected_prev[1];
	end
	if (
		( w1_expected_prev[2] !== 1'bx ) && ( w1_prev[2] !== w1_expected_prev[2] )
		&& ((w1_expected_prev[2] !== last_w1_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[2] = w1_expected_prev[2];
	end
	if (
		( w1_expected_prev[3] !== 1'bx ) && ( w1_prev[3] !== w1_expected_prev[3] )
		&& ((w1_expected_prev[3] !== last_w1_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[3] = w1_expected_prev[3];
	end
	if (
		( w1_expected_prev[4] !== 1'bx ) && ( w1_prev[4] !== w1_expected_prev[4] )
		&& ((w1_expected_prev[4] !== last_w1_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[4] = w1_expected_prev[4];
	end
	if (
		( w1_expected_prev[5] !== 1'bx ) && ( w1_prev[5] !== w1_expected_prev[5] )
		&& ((w1_expected_prev[5] !== last_w1_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[5] = w1_expected_prev[5];
	end
	if (
		( w1_expected_prev[6] !== 1'bx ) && ( w1_prev[6] !== w1_expected_prev[6] )
		&& ((w1_expected_prev[6] !== last_w1_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[6] = w1_expected_prev[6];
	end
	if (
		( w1_expected_prev[7] !== 1'bx ) && ( w1_prev[7] !== w1_expected_prev[7] )
		&& ((w1_expected_prev[7] !== last_w1_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[7] = w1_expected_prev[7];
	end
	if (
		( w1_expected_prev[8] !== 1'bx ) && ( w1_prev[8] !== w1_expected_prev[8] )
		&& ((w1_expected_prev[8] !== last_w1_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[8] = w1_expected_prev[8];
	end
	if (
		( w1_expected_prev[9] !== 1'bx ) && ( w1_prev[9] !== w1_expected_prev[9] )
		&& ((w1_expected_prev[9] !== last_w1_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[9] = w1_expected_prev[9];
	end
	if (
		( w1_expected_prev[10] !== 1'bx ) && ( w1_prev[10] !== w1_expected_prev[10] )
		&& ((w1_expected_prev[10] !== last_w1_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[10] = w1_expected_prev[10];
	end
	if (
		( w1_expected_prev[11] !== 1'bx ) && ( w1_prev[11] !== w1_expected_prev[11] )
		&& ((w1_expected_prev[11] !== last_w1_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[11] = w1_expected_prev[11];
	end
	if (
		( w1_expected_prev[12] !== 1'bx ) && ( w1_prev[12] !== w1_expected_prev[12] )
		&& ((w1_expected_prev[12] !== last_w1_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[12] = w1_expected_prev[12];
	end
	if (
		( w1_expected_prev[13] !== 1'bx ) && ( w1_prev[13] !== w1_expected_prev[13] )
		&& ((w1_expected_prev[13] !== last_w1_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[13] = w1_expected_prev[13];
	end
	if (
		( w1_expected_prev[14] !== 1'bx ) && ( w1_prev[14] !== w1_expected_prev[14] )
		&& ((w1_expected_prev[14] !== last_w1_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[14] = w1_expected_prev[14];
	end
	if (
		( w1_expected_prev[15] !== 1'bx ) && ( w1_prev[15] !== w1_expected_prev[15] )
		&& ((w1_expected_prev[15] !== last_w1_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[15] = w1_expected_prev[15];
	end
	if (
		( w1_expected_prev[16] !== 1'bx ) && ( w1_prev[16] !== w1_expected_prev[16] )
		&& ((w1_expected_prev[16] !== last_w1_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[16] = w1_expected_prev[16];
	end
	if (
		( w1_expected_prev[17] !== 1'bx ) && ( w1_prev[17] !== w1_expected_prev[17] )
		&& ((w1_expected_prev[17] !== last_w1_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[17] = w1_expected_prev[17];
	end
	if (
		( w1_expected_prev[18] !== 1'bx ) && ( w1_prev[18] !== w1_expected_prev[18] )
		&& ((w1_expected_prev[18] !== last_w1_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[18] = w1_expected_prev[18];
	end
	if (
		( w1_expected_prev[19] !== 1'bx ) && ( w1_prev[19] !== w1_expected_prev[19] )
		&& ((w1_expected_prev[19] !== last_w1_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[19] = w1_expected_prev[19];
	end
	if (
		( w1_expected_prev[20] !== 1'bx ) && ( w1_prev[20] !== w1_expected_prev[20] )
		&& ((w1_expected_prev[20] !== last_w1_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[20] = w1_expected_prev[20];
	end
	if (
		( w1_expected_prev[21] !== 1'bx ) && ( w1_prev[21] !== w1_expected_prev[21] )
		&& ((w1_expected_prev[21] !== last_w1_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[21] = w1_expected_prev[21];
	end
	if (
		( w1_expected_prev[22] !== 1'bx ) && ( w1_prev[22] !== w1_expected_prev[22] )
		&& ((w1_expected_prev[22] !== last_w1_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[22] = w1_expected_prev[22];
	end
	if (
		( w1_expected_prev[23] !== 1'bx ) && ( w1_prev[23] !== w1_expected_prev[23] )
		&& ((w1_expected_prev[23] !== last_w1_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[23] = w1_expected_prev[23];
	end
	if (
		( w1_expected_prev[24] !== 1'bx ) && ( w1_prev[24] !== w1_expected_prev[24] )
		&& ((w1_expected_prev[24] !== last_w1_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[24] = w1_expected_prev[24];
	end
	if (
		( w1_expected_prev[25] !== 1'bx ) && ( w1_prev[25] !== w1_expected_prev[25] )
		&& ((w1_expected_prev[25] !== last_w1_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[25] = w1_expected_prev[25];
	end
	if (
		( w1_expected_prev[26] !== 1'bx ) && ( w1_prev[26] !== w1_expected_prev[26] )
		&& ((w1_expected_prev[26] !== last_w1_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[26] = w1_expected_prev[26];
	end
	if (
		( w1_expected_prev[27] !== 1'bx ) && ( w1_prev[27] !== w1_expected_prev[27] )
		&& ((w1_expected_prev[27] !== last_w1_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[27] = w1_expected_prev[27];
	end
	if (
		( w1_expected_prev[28] !== 1'bx ) && ( w1_prev[28] !== w1_expected_prev[28] )
		&& ((w1_expected_prev[28] !== last_w1_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[28] = w1_expected_prev[28];
	end
	if (
		( w1_expected_prev[29] !== 1'bx ) && ( w1_prev[29] !== w1_expected_prev[29] )
		&& ((w1_expected_prev[29] !== last_w1_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[29] = w1_expected_prev[29];
	end
	if (
		( w1_expected_prev[30] !== 1'bx ) && ( w1_prev[30] !== w1_expected_prev[30] )
		&& ((w1_expected_prev[30] !== last_w1_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[30] = w1_expected_prev[30];
	end
	if (
		( w1_expected_prev[31] !== 1'bx ) && ( w1_prev[31] !== w1_expected_prev[31] )
		&& ((w1_expected_prev[31] !== last_w1_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w1[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w1_expected_prev);
		$display ("     Real value = %b", w1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_w1_exp[31] = w1_expected_prev[31];
	end
	if (
		( w2_expected_prev[0] !== 1'bx ) && ( w2_prev[0] !== w2_expected_prev[0] )
		&& ((w2_expected_prev[0] !== last_w2_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[0] = w2_expected_prev[0];
	end
	if (
		( w2_expected_prev[1] !== 1'bx ) && ( w2_prev[1] !== w2_expected_prev[1] )
		&& ((w2_expected_prev[1] !== last_w2_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[1] = w2_expected_prev[1];
	end
	if (
		( w2_expected_prev[2] !== 1'bx ) && ( w2_prev[2] !== w2_expected_prev[2] )
		&& ((w2_expected_prev[2] !== last_w2_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[2] = w2_expected_prev[2];
	end
	if (
		( w2_expected_prev[3] !== 1'bx ) && ( w2_prev[3] !== w2_expected_prev[3] )
		&& ((w2_expected_prev[3] !== last_w2_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[3] = w2_expected_prev[3];
	end
	if (
		( w2_expected_prev[4] !== 1'bx ) && ( w2_prev[4] !== w2_expected_prev[4] )
		&& ((w2_expected_prev[4] !== last_w2_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[4] = w2_expected_prev[4];
	end
	if (
		( w2_expected_prev[5] !== 1'bx ) && ( w2_prev[5] !== w2_expected_prev[5] )
		&& ((w2_expected_prev[5] !== last_w2_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[5] = w2_expected_prev[5];
	end
	if (
		( w2_expected_prev[6] !== 1'bx ) && ( w2_prev[6] !== w2_expected_prev[6] )
		&& ((w2_expected_prev[6] !== last_w2_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[6] = w2_expected_prev[6];
	end
	if (
		( w2_expected_prev[7] !== 1'bx ) && ( w2_prev[7] !== w2_expected_prev[7] )
		&& ((w2_expected_prev[7] !== last_w2_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[7] = w2_expected_prev[7];
	end
	if (
		( w2_expected_prev[8] !== 1'bx ) && ( w2_prev[8] !== w2_expected_prev[8] )
		&& ((w2_expected_prev[8] !== last_w2_exp[8]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[8] = w2_expected_prev[8];
	end
	if (
		( w2_expected_prev[9] !== 1'bx ) && ( w2_prev[9] !== w2_expected_prev[9] )
		&& ((w2_expected_prev[9] !== last_w2_exp[9]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[9] = w2_expected_prev[9];
	end
	if (
		( w2_expected_prev[10] !== 1'bx ) && ( w2_prev[10] !== w2_expected_prev[10] )
		&& ((w2_expected_prev[10] !== last_w2_exp[10]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[10] = w2_expected_prev[10];
	end
	if (
		( w2_expected_prev[11] !== 1'bx ) && ( w2_prev[11] !== w2_expected_prev[11] )
		&& ((w2_expected_prev[11] !== last_w2_exp[11]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[11] = w2_expected_prev[11];
	end
	if (
		( w2_expected_prev[12] !== 1'bx ) && ( w2_prev[12] !== w2_expected_prev[12] )
		&& ((w2_expected_prev[12] !== last_w2_exp[12]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[12] = w2_expected_prev[12];
	end
	if (
		( w2_expected_prev[13] !== 1'bx ) && ( w2_prev[13] !== w2_expected_prev[13] )
		&& ((w2_expected_prev[13] !== last_w2_exp[13]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[13] = w2_expected_prev[13];
	end
	if (
		( w2_expected_prev[14] !== 1'bx ) && ( w2_prev[14] !== w2_expected_prev[14] )
		&& ((w2_expected_prev[14] !== last_w2_exp[14]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[14] = w2_expected_prev[14];
	end
	if (
		( w2_expected_prev[15] !== 1'bx ) && ( w2_prev[15] !== w2_expected_prev[15] )
		&& ((w2_expected_prev[15] !== last_w2_exp[15]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[15] = w2_expected_prev[15];
	end
	if (
		( w2_expected_prev[16] !== 1'bx ) && ( w2_prev[16] !== w2_expected_prev[16] )
		&& ((w2_expected_prev[16] !== last_w2_exp[16]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[16] = w2_expected_prev[16];
	end
	if (
		( w2_expected_prev[17] !== 1'bx ) && ( w2_prev[17] !== w2_expected_prev[17] )
		&& ((w2_expected_prev[17] !== last_w2_exp[17]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[17] = w2_expected_prev[17];
	end
	if (
		( w2_expected_prev[18] !== 1'bx ) && ( w2_prev[18] !== w2_expected_prev[18] )
		&& ((w2_expected_prev[18] !== last_w2_exp[18]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[18] = w2_expected_prev[18];
	end
	if (
		( w2_expected_prev[19] !== 1'bx ) && ( w2_prev[19] !== w2_expected_prev[19] )
		&& ((w2_expected_prev[19] !== last_w2_exp[19]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[19] = w2_expected_prev[19];
	end
	if (
		( w2_expected_prev[20] !== 1'bx ) && ( w2_prev[20] !== w2_expected_prev[20] )
		&& ((w2_expected_prev[20] !== last_w2_exp[20]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[20] = w2_expected_prev[20];
	end
	if (
		( w2_expected_prev[21] !== 1'bx ) && ( w2_prev[21] !== w2_expected_prev[21] )
		&& ((w2_expected_prev[21] !== last_w2_exp[21]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[21] = w2_expected_prev[21];
	end
	if (
		( w2_expected_prev[22] !== 1'bx ) && ( w2_prev[22] !== w2_expected_prev[22] )
		&& ((w2_expected_prev[22] !== last_w2_exp[22]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[22] = w2_expected_prev[22];
	end
	if (
		( w2_expected_prev[23] !== 1'bx ) && ( w2_prev[23] !== w2_expected_prev[23] )
		&& ((w2_expected_prev[23] !== last_w2_exp[23]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[23] = w2_expected_prev[23];
	end
	if (
		( w2_expected_prev[24] !== 1'bx ) && ( w2_prev[24] !== w2_expected_prev[24] )
		&& ((w2_expected_prev[24] !== last_w2_exp[24]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[24] = w2_expected_prev[24];
	end
	if (
		( w2_expected_prev[25] !== 1'bx ) && ( w2_prev[25] !== w2_expected_prev[25] )
		&& ((w2_expected_prev[25] !== last_w2_exp[25]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[25] = w2_expected_prev[25];
	end
	if (
		( w2_expected_prev[26] !== 1'bx ) && ( w2_prev[26] !== w2_expected_prev[26] )
		&& ((w2_expected_prev[26] !== last_w2_exp[26]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[26] = w2_expected_prev[26];
	end
	if (
		( w2_expected_prev[27] !== 1'bx ) && ( w2_prev[27] !== w2_expected_prev[27] )
		&& ((w2_expected_prev[27] !== last_w2_exp[27]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[27] = w2_expected_prev[27];
	end
	if (
		( w2_expected_prev[28] !== 1'bx ) && ( w2_prev[28] !== w2_expected_prev[28] )
		&& ((w2_expected_prev[28] !== last_w2_exp[28]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[28] = w2_expected_prev[28];
	end
	if (
		( w2_expected_prev[29] !== 1'bx ) && ( w2_prev[29] !== w2_expected_prev[29] )
		&& ((w2_expected_prev[29] !== last_w2_exp[29]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[29] = w2_expected_prev[29];
	end
	if (
		( w2_expected_prev[30] !== 1'bx ) && ( w2_prev[30] !== w2_expected_prev[30] )
		&& ((w2_expected_prev[30] !== last_w2_exp[30]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[30] = w2_expected_prev[30];
	end
	if (
		( w2_expected_prev[31] !== 1'bx ) && ( w2_prev[31] !== w2_expected_prev[31] )
		&& ((w2_expected_prev[31] !== last_w2_exp[31]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w2[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w2_expected_prev);
		$display ("     Real value = %b", w2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_w2_exp[31] = w2_expected_prev[31];
	end
	if (
		( w3_expected_prev[0] !== 1'bx ) && ( w3_prev[0] !== w3_expected_prev[0] )
		&& ((w3_expected_prev[0] !== last_w3_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[0] = w3_expected_prev[0];
	end
	if (
		( w3_expected_prev[1] !== 1'bx ) && ( w3_prev[1] !== w3_expected_prev[1] )
		&& ((w3_expected_prev[1] !== last_w3_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[1] = w3_expected_prev[1];
	end
	if (
		( w3_expected_prev[2] !== 1'bx ) && ( w3_prev[2] !== w3_expected_prev[2] )
		&& ((w3_expected_prev[2] !== last_w3_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[2] = w3_expected_prev[2];
	end
	if (
		( w3_expected_prev[3] !== 1'bx ) && ( w3_prev[3] !== w3_expected_prev[3] )
		&& ((w3_expected_prev[3] !== last_w3_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[3] = w3_expected_prev[3];
	end
	if (
		( w3_expected_prev[4] !== 1'bx ) && ( w3_prev[4] !== w3_expected_prev[4] )
		&& ((w3_expected_prev[4] !== last_w3_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[4] = w3_expected_prev[4];
	end
	if (
		( w3_expected_prev[5] !== 1'bx ) && ( w3_prev[5] !== w3_expected_prev[5] )
		&& ((w3_expected_prev[5] !== last_w3_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[5] = w3_expected_prev[5];
	end
	if (
		( w3_expected_prev[6] !== 1'bx ) && ( w3_prev[6] !== w3_expected_prev[6] )
		&& ((w3_expected_prev[6] !== last_w3_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[6] = w3_expected_prev[6];
	end
	if (
		( w3_expected_prev[7] !== 1'bx ) && ( w3_prev[7] !== w3_expected_prev[7] )
		&& ((w3_expected_prev[7] !== last_w3_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[7] = w3_expected_prev[7];
	end
	if (
		( w3_expected_prev[8] !== 1'bx ) && ( w3_prev[8] !== w3_expected_prev[8] )
		&& ((w3_expected_prev[8] !== last_w3_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[8] = w3_expected_prev[8];
	end
	if (
		( w3_expected_prev[9] !== 1'bx ) && ( w3_prev[9] !== w3_expected_prev[9] )
		&& ((w3_expected_prev[9] !== last_w3_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[9] = w3_expected_prev[9];
	end
	if (
		( w3_expected_prev[10] !== 1'bx ) && ( w3_prev[10] !== w3_expected_prev[10] )
		&& ((w3_expected_prev[10] !== last_w3_exp[10]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[10] = w3_expected_prev[10];
	end
	if (
		( w3_expected_prev[11] !== 1'bx ) && ( w3_prev[11] !== w3_expected_prev[11] )
		&& ((w3_expected_prev[11] !== last_w3_exp[11]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[11] = w3_expected_prev[11];
	end
	if (
		( w3_expected_prev[12] !== 1'bx ) && ( w3_prev[12] !== w3_expected_prev[12] )
		&& ((w3_expected_prev[12] !== last_w3_exp[12]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[12] = w3_expected_prev[12];
	end
	if (
		( w3_expected_prev[13] !== 1'bx ) && ( w3_prev[13] !== w3_expected_prev[13] )
		&& ((w3_expected_prev[13] !== last_w3_exp[13]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[13] = w3_expected_prev[13];
	end
	if (
		( w3_expected_prev[14] !== 1'bx ) && ( w3_prev[14] !== w3_expected_prev[14] )
		&& ((w3_expected_prev[14] !== last_w3_exp[14]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[14] = w3_expected_prev[14];
	end
	if (
		( w3_expected_prev[15] !== 1'bx ) && ( w3_prev[15] !== w3_expected_prev[15] )
		&& ((w3_expected_prev[15] !== last_w3_exp[15]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[15] = w3_expected_prev[15];
	end
	if (
		( w3_expected_prev[16] !== 1'bx ) && ( w3_prev[16] !== w3_expected_prev[16] )
		&& ((w3_expected_prev[16] !== last_w3_exp[16]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[16] = w3_expected_prev[16];
	end
	if (
		( w3_expected_prev[17] !== 1'bx ) && ( w3_prev[17] !== w3_expected_prev[17] )
		&& ((w3_expected_prev[17] !== last_w3_exp[17]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[17] = w3_expected_prev[17];
	end
	if (
		( w3_expected_prev[18] !== 1'bx ) && ( w3_prev[18] !== w3_expected_prev[18] )
		&& ((w3_expected_prev[18] !== last_w3_exp[18]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[18] = w3_expected_prev[18];
	end
	if (
		( w3_expected_prev[19] !== 1'bx ) && ( w3_prev[19] !== w3_expected_prev[19] )
		&& ((w3_expected_prev[19] !== last_w3_exp[19]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[19] = w3_expected_prev[19];
	end
	if (
		( w3_expected_prev[20] !== 1'bx ) && ( w3_prev[20] !== w3_expected_prev[20] )
		&& ((w3_expected_prev[20] !== last_w3_exp[20]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[20] = w3_expected_prev[20];
	end
	if (
		( w3_expected_prev[21] !== 1'bx ) && ( w3_prev[21] !== w3_expected_prev[21] )
		&& ((w3_expected_prev[21] !== last_w3_exp[21]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[21] = w3_expected_prev[21];
	end
	if (
		( w3_expected_prev[22] !== 1'bx ) && ( w3_prev[22] !== w3_expected_prev[22] )
		&& ((w3_expected_prev[22] !== last_w3_exp[22]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[22] = w3_expected_prev[22];
	end
	if (
		( w3_expected_prev[23] !== 1'bx ) && ( w3_prev[23] !== w3_expected_prev[23] )
		&& ((w3_expected_prev[23] !== last_w3_exp[23]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[23] = w3_expected_prev[23];
	end
	if (
		( w3_expected_prev[24] !== 1'bx ) && ( w3_prev[24] !== w3_expected_prev[24] )
		&& ((w3_expected_prev[24] !== last_w3_exp[24]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[24] = w3_expected_prev[24];
	end
	if (
		( w3_expected_prev[25] !== 1'bx ) && ( w3_prev[25] !== w3_expected_prev[25] )
		&& ((w3_expected_prev[25] !== last_w3_exp[25]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[25] = w3_expected_prev[25];
	end
	if (
		( w3_expected_prev[26] !== 1'bx ) && ( w3_prev[26] !== w3_expected_prev[26] )
		&& ((w3_expected_prev[26] !== last_w3_exp[26]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[26] = w3_expected_prev[26];
	end
	if (
		( w3_expected_prev[27] !== 1'bx ) && ( w3_prev[27] !== w3_expected_prev[27] )
		&& ((w3_expected_prev[27] !== last_w3_exp[27]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[27] = w3_expected_prev[27];
	end
	if (
		( w3_expected_prev[28] !== 1'bx ) && ( w3_prev[28] !== w3_expected_prev[28] )
		&& ((w3_expected_prev[28] !== last_w3_exp[28]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[28] = w3_expected_prev[28];
	end
	if (
		( w3_expected_prev[29] !== 1'bx ) && ( w3_prev[29] !== w3_expected_prev[29] )
		&& ((w3_expected_prev[29] !== last_w3_exp[29]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[29] = w3_expected_prev[29];
	end
	if (
		( w3_expected_prev[30] !== 1'bx ) && ( w3_prev[30] !== w3_expected_prev[30] )
		&& ((w3_expected_prev[30] !== last_w3_exp[30]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[30] = w3_expected_prev[30];
	end
	if (
		( w3_expected_prev[31] !== 1'bx ) && ( w3_prev[31] !== w3_expected_prev[31] )
		&& ((w3_expected_prev[31] !== last_w3_exp[31]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port w3[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", w3_expected_prev);
		$display ("     Real value = %b", w3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_w3_exp[31] = w3_expected_prev[31];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module AESK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [127:0] key;
reg sel;
// wires                                               
wire [31:0] w0;
wire [31:0] w1;
wire [31:0] w2;
wire [31:0] w3;

wire sampler;                             

// assign statements (if any)                          
AESK i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.key(key),
	.sel(sel),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3)
);
// key[ 127 ]
initial
begin
	key[127] = 1'b0;
end 
// key[ 126 ]
initial
begin
	key[126] = 1'b0;
end 
// key[ 125 ]
initial
begin
	key[125] = 1'b1;
end 
// key[ 124 ]
initial
begin
	key[124] = 1'b0;
end 
// key[ 123 ]
initial
begin
	key[123] = 1'b1;
end 
// key[ 122 ]
initial
begin
	key[122] = 1'b0;
end 
// key[ 121 ]
initial
begin
	key[121] = 1'b1;
end 
// key[ 120 ]
initial
begin
	key[120] = 1'b1;
end 
// key[ 119 ]
initial
begin
	key[119] = 1'b0;
end 
// key[ 118 ]
initial
begin
	key[118] = 1'b1;
end 
// key[ 117 ]
initial
begin
	key[117] = 1'b1;
end 
// key[ 116 ]
initial
begin
	key[116] = 1'b1;
end 
// key[ 115 ]
initial
begin
	key[115] = 1'b1;
end 
// key[ 114 ]
initial
begin
	key[114] = 1'b1;
end 
// key[ 113 ]
initial
begin
	key[113] = 1'b1;
end 
// key[ 112 ]
initial
begin
	key[112] = 1'b0;
end 
// key[ 111 ]
initial
begin
	key[111] = 1'b0;
end 
// key[ 110 ]
initial
begin
	key[110] = 1'b0;
end 
// key[ 109 ]
initial
begin
	key[109] = 1'b0;
end 
// key[ 108 ]
initial
begin
	key[108] = 1'b1;
end 
// key[ 107 ]
initial
begin
	key[107] = 1'b0;
end 
// key[ 106 ]
initial
begin
	key[106] = 1'b1;
end 
// key[ 105 ]
initial
begin
	key[105] = 1'b0;
end 
// key[ 104 ]
initial
begin
	key[104] = 1'b1;
end 
// key[ 103 ]
initial
begin
	key[103] = 1'b0;
end 
// key[ 102 ]
initial
begin
	key[102] = 1'b0;
end 
// key[ 101 ]
initial
begin
	key[101] = 1'b0;
end 
// key[ 100 ]
initial
begin
	key[100] = 1'b1;
end 
// key[ 99 ]
initial
begin
	key[99] = 1'b0;
end 
// key[ 98 ]
initial
begin
	key[98] = 1'b1;
end 
// key[ 97 ]
initial
begin
	key[97] = 1'b1;
end 
// key[ 96 ]
initial
begin
	key[96] = 1'b0;
end 
// key[ 95 ]
initial
begin
	key[95] = 1'b0;
end 
// key[ 94 ]
initial
begin
	key[94] = 1'b0;
end 
// key[ 93 ]
initial
begin
	key[93] = 1'b1;
end 
// key[ 92 ]
initial
begin
	key[92] = 1'b0;
end 
// key[ 91 ]
initial
begin
	key[91] = 1'b1;
end 
// key[ 90 ]
initial
begin
	key[90] = 1'b0;
end 
// key[ 89 ]
initial
begin
	key[89] = 1'b0;
end 
// key[ 88 ]
initial
begin
	key[88] = 1'b0;
end 
// key[ 87 ]
initial
begin
	key[87] = 1'b1;
end 
// key[ 86 ]
initial
begin
	key[86] = 1'b0;
end 
// key[ 85 ]
initial
begin
	key[85] = 1'b1;
end 
// key[ 84 ]
initial
begin
	key[84] = 1'b0;
end 
// key[ 83 ]
initial
begin
	key[83] = 1'b1;
end 
// key[ 82 ]
initial
begin
	key[82] = 1'b1;
end 
// key[ 81 ]
initial
begin
	key[81] = 1'b1;
end 
// key[ 80 ]
initial
begin
	key[80] = 1'b0;
end 
// key[ 79 ]
initial
begin
	key[79] = 1'b1;
end 
// key[ 78 ]
initial
begin
	key[78] = 1'b1;
end 
// key[ 77 ]
initial
begin
	key[77] = 1'b0;
end 
// key[ 76 ]
initial
begin
	key[76] = 1'b1;
end 
// key[ 75 ]
initial
begin
	key[75] = 1'b0;
end 
// key[ 74 ]
initial
begin
	key[74] = 1'b0;
end 
// key[ 73 ]
initial
begin
	key[73] = 1'b1;
end 
// key[ 72 ]
initial
begin
	key[72] = 1'b0;
end 
// key[ 71 ]
initial
begin
	key[71] = 1'b1;
end 
// key[ 70 ]
initial
begin
	key[70] = 1'b0;
end 
// key[ 69 ]
initial
begin
	key[69] = 1'b1;
end 
// key[ 68 ]
initial
begin
	key[68] = 1'b0;
end 
// key[ 67 ]
initial
begin
	key[67] = 1'b0;
end 
// key[ 66 ]
initial
begin
	key[66] = 1'b1;
end 
// key[ 65 ]
initial
begin
	key[65] = 1'b1;
end 
// key[ 64 ]
initial
begin
	key[64] = 1'b0;
end 
// key[ 63 ]
initial
begin
	key[63] = 1'b1;
end 
// key[ 62 ]
initial
begin
	key[62] = 1'b0;
end 
// key[ 61 ]
initial
begin
	key[61] = 1'b1;
end 
// key[ 60 ]
initial
begin
	key[60] = 1'b0;
end 
// key[ 59 ]
initial
begin
	key[59] = 1'b1;
end 
// key[ 58 ]
initial
begin
	key[58] = 1'b0;
end 
// key[ 57 ]
initial
begin
	key[57] = 1'b1;
end 
// key[ 56 ]
initial
begin
	key[56] = 1'b1;
end 
// key[ 55 ]
initial
begin
	key[55] = 1'b1;
end 
// key[ 54 ]
initial
begin
	key[54] = 1'b1;
end 
// key[ 53 ]
initial
begin
	key[53] = 1'b1;
end 
// key[ 52 ]
initial
begin
	key[52] = 1'b1;
end 
// key[ 51 ]
initial
begin
	key[51] = 1'b0;
end 
// key[ 50 ]
initial
begin
	key[50] = 1'b1;
end 
// key[ 49 ]
initial
begin
	key[49] = 1'b1;
end 
// key[ 48 ]
initial
begin
	key[48] = 1'b1;
end 
// key[ 47 ]
initial
begin
	key[47] = 1'b0;
end 
// key[ 46 ]
initial
begin
	key[46] = 1'b0;
end 
// key[ 45 ]
initial
begin
	key[45] = 1'b0;
end 
// key[ 44 ]
initial
begin
	key[44] = 1'b1;
end 
// key[ 43 ]
initial
begin
	key[43] = 1'b0;
end 
// key[ 42 ]
initial
begin
	key[42] = 1'b1;
end 
// key[ 41 ]
initial
begin
	key[41] = 1'b0;
end 
// key[ 40 ]
initial
begin
	key[40] = 1'b1;
end 
// key[ 39 ]
initial
begin
	key[39] = 1'b1;
end 
// key[ 38 ]
initial
begin
	key[38] = 1'b0;
end 
// key[ 37 ]
initial
begin
	key[37] = 1'b0;
end 
// key[ 36 ]
initial
begin
	key[36] = 1'b0;
end 
// key[ 35 ]
initial
begin
	key[35] = 1'b1;
end 
// key[ 34 ]
initial
begin
	key[34] = 1'b0;
end 
// key[ 33 ]
initial
begin
	key[33] = 1'b0;
end 
// key[ 32 ]
initial
begin
	key[32] = 1'b0;
end 
// key[ 31 ]
initial
begin
	key[31] = 1'b0;
end 
// key[ 30 ]
initial
begin
	key[30] = 1'b0;
end 
// key[ 29 ]
initial
begin
	key[29] = 1'b0;
end 
// key[ 28 ]
initial
begin
	key[28] = 1'b0;
end 
// key[ 27 ]
initial
begin
	key[27] = 1'b1;
end 
// key[ 26 ]
initial
begin
	key[26] = 1'b0;
end 
// key[ 25 ]
initial
begin
	key[25] = 1'b0;
end 
// key[ 24 ]
initial
begin
	key[24] = 1'b1;
end 
// key[ 23 ]
initial
begin
	key[23] = 1'b1;
end 
// key[ 22 ]
initial
begin
	key[22] = 1'b1;
end 
// key[ 21 ]
initial
begin
	key[21] = 1'b0;
end 
// key[ 20 ]
initial
begin
	key[20] = 1'b0;
end 
// key[ 19 ]
initial
begin
	key[19] = 1'b1;
end 
// key[ 18 ]
initial
begin
	key[18] = 1'b1;
end 
// key[ 17 ]
initial
begin
	key[17] = 1'b1;
end 
// key[ 16 ]
initial
begin
	key[16] = 1'b1;
end 
// key[ 15 ]
initial
begin
	key[15] = 1'b0;
end 
// key[ 14 ]
initial
begin
	key[14] = 1'b1;
end 
// key[ 13 ]
initial
begin
	key[13] = 1'b0;
end 
// key[ 12 ]
initial
begin
	key[12] = 1'b0;
end 
// key[ 11 ]
initial
begin
	key[11] = 1'b1;
end 
// key[ 10 ]
initial
begin
	key[10] = 1'b1;
end 
// key[ 9 ]
initial
begin
	key[9] = 1'b1;
end 
// key[ 8 ]
initial
begin
	key[8] = 1'b1;
end 
// key[ 7 ]
initial
begin
	key[7] = 1'b0;
end 
// key[ 6 ]
initial
begin
	key[6] = 1'b0;
end 
// key[ 5 ]
initial
begin
	key[5] = 1'b1;
end 
// key[ 4 ]
initial
begin
	key[4] = 1'b1;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b1;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b1;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
end 

// CLK
initial
begin
	CLK = 1'b0;
	CLK = #10000 1'b1;
	CLK = #38000 1'b0;
	CLK = #48000 1'b1;
	# 48000;
	repeat(8)
	begin
		CLK = 1'b0;
		CLK = #48000 1'b1;
		# 48000;
	end
	CLK = 1'b0;
	CLK = #48000 1'b1;
end 

// sel
initial
begin
	sel = 1'b1;
	sel = #50000 1'b0;
end 

AESK_vlg_sample_tst tb_sample (
	.CLK(CLK),
	.key(key),
	.sel(sel),
	.sampler_tx(sampler)
);

AESK_vlg_check_tst tb_out(
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3),
	.sampler_rx(sampler)
);
endmodule


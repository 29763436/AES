// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/25/2024 23:40:09"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    AESK
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module AESK_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLK;
reg [127:0] key;
reg sel;
// wires                                               
wire [31:0] w0;
wire [31:0] w1;
wire [31:0] w2;
wire [31:0] w3;

// assign statements (if any)                          
AESK i1 (
// port map - connection between master ports and signals/registers   
	.CLK(CLK),
	.key(key),
	.sel(sel),
	.w0(w0),
	.w1(w1),
	.w2(w2),
	.w3(w3)
);
initial 
begin 
#1000000 $finish;
end 

// CLK
initial
begin
	repeat(10)
	begin
		CLK = 1'b0;
		CLK = #48000 1'b1;
		# 48000;
	end
	CLK = 1'b0;
end 
// key[ 127 ]
initial
begin
	key[127] = 1'b0;
end 
// key[ 126 ]
initial
begin
	key[126] = 1'b0;
end 
// key[ 125 ]
initial
begin
	key[125] = 1'b1;
end 
// key[ 124 ]
initial
begin
	key[124] = 1'b0;
end 
// key[ 123 ]
initial
begin
	key[123] = 1'b1;
end 
// key[ 122 ]
initial
begin
	key[122] = 1'b0;
end 
// key[ 121 ]
initial
begin
	key[121] = 1'b1;
end 
// key[ 120 ]
initial
begin
	key[120] = 1'b1;
end 
// key[ 119 ]
initial
begin
	key[119] = 1'b0;
end 
// key[ 118 ]
initial
begin
	key[118] = 1'b1;
end 
// key[ 117 ]
initial
begin
	key[117] = 1'b1;
end 
// key[ 116 ]
initial
begin
	key[116] = 1'b1;
end 
// key[ 115 ]
initial
begin
	key[115] = 1'b1;
end 
// key[ 114 ]
initial
begin
	key[114] = 1'b1;
end 
// key[ 113 ]
initial
begin
	key[113] = 1'b1;
end 
// key[ 112 ]
initial
begin
	key[112] = 1'b0;
end 
// key[ 111 ]
initial
begin
	key[111] = 1'b0;
end 
// key[ 110 ]
initial
begin
	key[110] = 1'b0;
end 
// key[ 109 ]
initial
begin
	key[109] = 1'b0;
end 
// key[ 108 ]
initial
begin
	key[108] = 1'b1;
end 
// key[ 107 ]
initial
begin
	key[107] = 1'b0;
end 
// key[ 106 ]
initial
begin
	key[106] = 1'b1;
end 
// key[ 105 ]
initial
begin
	key[105] = 1'b0;
end 
// key[ 104 ]
initial
begin
	key[104] = 1'b1;
end 
// key[ 103 ]
initial
begin
	key[103] = 1'b0;
end 
// key[ 102 ]
initial
begin
	key[102] = 1'b0;
end 
// key[ 101 ]
initial
begin
	key[101] = 1'b0;
end 
// key[ 100 ]
initial
begin
	key[100] = 1'b1;
end 
// key[ 99 ]
initial
begin
	key[99] = 1'b0;
end 
// key[ 98 ]
initial
begin
	key[98] = 1'b1;
end 
// key[ 97 ]
initial
begin
	key[97] = 1'b1;
end 
// key[ 96 ]
initial
begin
	key[96] = 1'b0;
end 
// key[ 95 ]
initial
begin
	key[95] = 1'b0;
end 
// key[ 94 ]
initial
begin
	key[94] = 1'b0;
end 
// key[ 93 ]
initial
begin
	key[93] = 1'b1;
end 
// key[ 92 ]
initial
begin
	key[92] = 1'b0;
end 
// key[ 91 ]
initial
begin
	key[91] = 1'b1;
end 
// key[ 90 ]
initial
begin
	key[90] = 1'b0;
end 
// key[ 89 ]
initial
begin
	key[89] = 1'b0;
end 
// key[ 88 ]
initial
begin
	key[88] = 1'b0;
end 
// key[ 87 ]
initial
begin
	key[87] = 1'b1;
end 
// key[ 86 ]
initial
begin
	key[86] = 1'b0;
end 
// key[ 85 ]
initial
begin
	key[85] = 1'b1;
end 
// key[ 84 ]
initial
begin
	key[84] = 1'b0;
end 
// key[ 83 ]
initial
begin
	key[83] = 1'b1;
end 
// key[ 82 ]
initial
begin
	key[82] = 1'b1;
end 
// key[ 81 ]
initial
begin
	key[81] = 1'b1;
end 
// key[ 80 ]
initial
begin
	key[80] = 1'b0;
end 
// key[ 79 ]
initial
begin
	key[79] = 1'b1;
end 
// key[ 78 ]
initial
begin
	key[78] = 1'b1;
end 
// key[ 77 ]
initial
begin
	key[77] = 1'b0;
end 
// key[ 76 ]
initial
begin
	key[76] = 1'b1;
end 
// key[ 75 ]
initial
begin
	key[75] = 1'b0;
end 
// key[ 74 ]
initial
begin
	key[74] = 1'b0;
end 
// key[ 73 ]
initial
begin
	key[73] = 1'b1;
end 
// key[ 72 ]
initial
begin
	key[72] = 1'b0;
end 
// key[ 71 ]
initial
begin
	key[71] = 1'b1;
end 
// key[ 70 ]
initial
begin
	key[70] = 1'b0;
end 
// key[ 69 ]
initial
begin
	key[69] = 1'b1;
end 
// key[ 68 ]
initial
begin
	key[68] = 1'b0;
end 
// key[ 67 ]
initial
begin
	key[67] = 1'b0;
end 
// key[ 66 ]
initial
begin
	key[66] = 1'b1;
end 
// key[ 65 ]
initial
begin
	key[65] = 1'b1;
end 
// key[ 64 ]
initial
begin
	key[64] = 1'b0;
end 
// key[ 63 ]
initial
begin
	key[63] = 1'b1;
end 
// key[ 62 ]
initial
begin
	key[62] = 1'b0;
end 
// key[ 61 ]
initial
begin
	key[61] = 1'b1;
end 
// key[ 60 ]
initial
begin
	key[60] = 1'b0;
end 
// key[ 59 ]
initial
begin
	key[59] = 1'b1;
end 
// key[ 58 ]
initial
begin
	key[58] = 1'b0;
end 
// key[ 57 ]
initial
begin
	key[57] = 1'b1;
end 
// key[ 56 ]
initial
begin
	key[56] = 1'b1;
end 
// key[ 55 ]
initial
begin
	key[55] = 1'b1;
end 
// key[ 54 ]
initial
begin
	key[54] = 1'b1;
end 
// key[ 53 ]
initial
begin
	key[53] = 1'b1;
end 
// key[ 52 ]
initial
begin
	key[52] = 1'b1;
end 
// key[ 51 ]
initial
begin
	key[51] = 1'b0;
end 
// key[ 50 ]
initial
begin
	key[50] = 1'b1;
end 
// key[ 49 ]
initial
begin
	key[49] = 1'b1;
end 
// key[ 48 ]
initial
begin
	key[48] = 1'b1;
end 
// key[ 47 ]
initial
begin
	key[47] = 1'b0;
end 
// key[ 46 ]
initial
begin
	key[46] = 1'b0;
end 
// key[ 45 ]
initial
begin
	key[45] = 1'b0;
end 
// key[ 44 ]
initial
begin
	key[44] = 1'b1;
end 
// key[ 43 ]
initial
begin
	key[43] = 1'b0;
end 
// key[ 42 ]
initial
begin
	key[42] = 1'b1;
end 
// key[ 41 ]
initial
begin
	key[41] = 1'b0;
end 
// key[ 40 ]
initial
begin
	key[40] = 1'b1;
end 
// key[ 39 ]
initial
begin
	key[39] = 1'b1;
end 
// key[ 38 ]
initial
begin
	key[38] = 1'b0;
end 
// key[ 37 ]
initial
begin
	key[37] = 1'b0;
end 
// key[ 36 ]
initial
begin
	key[36] = 1'b0;
end 
// key[ 35 ]
initial
begin
	key[35] = 1'b1;
end 
// key[ 34 ]
initial
begin
	key[34] = 1'b0;
end 
// key[ 33 ]
initial
begin
	key[33] = 1'b0;
end 
// key[ 32 ]
initial
begin
	key[32] = 1'b0;
end 
// key[ 31 ]
initial
begin
	key[31] = 1'b0;
end 
// key[ 30 ]
initial
begin
	key[30] = 1'b0;
end 
// key[ 29 ]
initial
begin
	key[29] = 1'b0;
end 
// key[ 28 ]
initial
begin
	key[28] = 1'b0;
end 
// key[ 27 ]
initial
begin
	key[27] = 1'b1;
end 
// key[ 26 ]
initial
begin
	key[26] = 1'b0;
end 
// key[ 25 ]
initial
begin
	key[25] = 1'b0;
end 
// key[ 24 ]
initial
begin
	key[24] = 1'b1;
end 
// key[ 23 ]
initial
begin
	key[23] = 1'b1;
end 
// key[ 22 ]
initial
begin
	key[22] = 1'b1;
end 
// key[ 21 ]
initial
begin
	key[21] = 1'b0;
end 
// key[ 20 ]
initial
begin
	key[20] = 1'b0;
end 
// key[ 19 ]
initial
begin
	key[19] = 1'b1;
end 
// key[ 18 ]
initial
begin
	key[18] = 1'b1;
end 
// key[ 17 ]
initial
begin
	key[17] = 1'b1;
end 
// key[ 16 ]
initial
begin
	key[16] = 1'b1;
end 
// key[ 15 ]
initial
begin
	key[15] = 1'b0;
end 
// key[ 14 ]
initial
begin
	key[14] = 1'b1;
end 
// key[ 13 ]
initial
begin
	key[13] = 1'b0;
end 
// key[ 12 ]
initial
begin
	key[12] = 1'b0;
end 
// key[ 11 ]
initial
begin
	key[11] = 1'b1;
end 
// key[ 10 ]
initial
begin
	key[10] = 1'b1;
end 
// key[ 9 ]
initial
begin
	key[9] = 1'b1;
end 
// key[ 8 ]
initial
begin
	key[8] = 1'b1;
end 
// key[ 7 ]
initial
begin
	key[7] = 1'b0;
end 
// key[ 6 ]
initial
begin
	key[6] = 1'b0;
end 
// key[ 5 ]
initial
begin
	key[5] = 1'b1;
end 
// key[ 4 ]
initial
begin
	key[4] = 1'b1;
end 
// key[ 3 ]
initial
begin
	key[3] = 1'b1;
end 
// key[ 2 ]
initial
begin
	key[2] = 1'b1;
end 
// key[ 1 ]
initial
begin
	key[1] = 1'b0;
end 
// key[ 0 ]
initial
begin
	key[0] = 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

